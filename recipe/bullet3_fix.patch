diff --git a/BulletConfig.cmake.in b/BulletConfig.cmake.in
index f5dc7bdbb..f04f7ad53 100644
--- a/BulletConfig.cmake.in
+++ b/BulletConfig.cmake.in
@@ -16,7 +16,7 @@
 
 set ( BULLET_FOUND 1 )
 set ( BULLET_USE_FILE     "@BULLET_USE_FILE@" )
-set ( BULLET_DEFINITIONS  "@BULLET_DEFINITIONS@" )
+set ( BULLET_DEFINITIONS  "@BULLET_DOUBLE_DEF@" )
 set ( BULLET_INCLUDE_DIR  "@INCLUDE_INSTALL_DIR@" )
 set ( BULLET_INCLUDE_DIRS "@INCLUDE_INSTALL_DIR@" )
 set ( BULLET_LIBRARIES    "@BULLET_LIBRARIES@" )
diff --git a/CMakeLists.txt b/CMakeLists.txt
index a695b7172..2f22ed6ed 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,10 +1,97 @@
-cmake_minimum_required(VERSION 2.4.3)
+cmake_minimum_required(VERSION 3.3)
+
 set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)
 cmake_policy(SET CMP0017 NEW)
 #this line has to appear before 'PROJECT' in order to be able to disable incremental linking
 SET(MSVC_INCREMENTAL_DEFAULT ON)
-
 PROJECT(BULLET_PHYSICS)
+
+FIND_PACKAGE(OpenGL)
+
+IF (NOT WIN32)
+	FIND_PACKAGE(Threads)
+ENDIF (NOT WIN32)
+
+set(BUILD_SHARED_LIBS OFF CACHE BOOL "Use shared libraries" FORCE)
+SET(INSTALL_LIBS ON CACHE BOOL "Set when you want to install libraries" FORCE)
+OPTION(USE_DOUBLE_PRECISION "Use double precision"	ON)
+# I want to produce libraries with different filenames if we're building
+# double-precision-enabled libraries. This makes it possible to ship both builds
+# to the users, and to let them decide which they want based on the filename. I
+# do this by overriding the CMake library-defining and library-using functions
+# (add_library, target_link_libraries, ...) to add a suffix to the
+# double-precision libraries
+IF (USE_DOUBLE_PRECISION)
+  set( lib_type_suffix "-float64" )
+else()
+  set( lib_type_suffix "" )
+endif()
+set( libs_in_this_project 
+  "BulletRobotics"
+  "ConvexDecomposition"
+  "GIMPACTUtils"
+  "GIMPACTUtilsHACD"
+  "BlenderSerialize"
+  "BulletFileLoader"
+  "BulletDNA"
+  "Bullet3Collision"
+  "Bullet3Common"
+  "Bullet3Dynamics"
+  "Bullet3Geometry"
+  "Bullet3OpenCL_clew"
+  "Bullet2FileLoader"
+  "BulletCollision"
+  "BulletDynamics"
+  "BulletInverseDynamics"
+  "BulletSoftBody"
+  "LinearMath"
+  "BulletInverseDynamicsUtils"
+  "BulletWorldImporter"
+  "BulletXmlWorldImporter"
+  "HACD"
+  )
+function(add_library)
+  SET( _lib_here ${ARGV0} )
+  LIST(REMOVE_AT ARGN 0)
+  _add_library("${_lib_here}${lib_type_suffix}" ${ARGN})
+endfunction()
+function(SET_TARGET_PROPERTIES)
+  SET( _lib_here ${ARGV0} )
+  LIST(REMOVE_AT ARGN 0)
+  _SET_TARGET_PROPERTIES("${_lib_here}${lib_type_suffix}" ${ARGN})
+endfunction()
+function(TARGET_LINK_LIBRARIES)
+  SET(_libs_suffixed "")
+  FOREACH(f ${ARGN})
+    if (${f} IN_LIST libs_in_this_project)
+      LIST(APPEND _libs_suffixed "${f}${lib_type_suffix}")
+    else()
+      LIST(APPEND _libs_suffixed "${f}")
+    endif()
+  ENDFOREACH(f)
+  _TARGET_LINK_LIBRARIES(${_libs_suffixed})
+endfunction()
+function(INSTALL)
+  SET(_install_args "")
+  FOREACH(f ${ARGN})
+    if (${f} IN_LIST libs_in_this_project)
+      LIST(APPEND _install_args "${f}${lib_type_suffix}")
+    else()
+      LIST(APPEND _install_args "${f}")
+    endif()
+  ENDFOREACH(f)
+  _INSTALL(${_install_args})
+endfunction()
+
+
+
+
+
+
+
+
+
+
 FILE (STRINGS "VERSION" BULLET_VERSION)
 
 IF(COMMAND cmake_policy)
@@ -23,16 +110,14 @@ ENDIF (NOT CMAKE_BUILD_TYPE)
 SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
 #MESSAGE("CMAKE_CXX_FLAGS_DEBUG="+${CMAKE_CXX_FLAGS_DEBUG})
 
-OPTION(USE_DOUBLE_PRECISION "Use double precision"	OFF)
 SET(CLAMP_VELOCITIES "0" CACHE STRING "Clamp rigid bodies' velocity to this value, if larger than zero. Useful to prevent floating point errors or in general runaway velocities in complex scenarios")
 OPTION(USE_GRAPHICAL_BENCHMARK "Use Graphical Benchmark" ON)
-OPTION(BUILD_SHARED_LIBS "Use shared libraries" OFF)
 OPTION(USE_SOFT_BODY_MULTI_BODY_DYNAMICS_WORLD "Use btSoftMultiBodyDynamicsWorld" ON)
 OPTION(USE_OPENVR "Use OpenVR for virtual reality" OFF)
 
 OPTION(ENABLE_VHACD "Use VHACD in BulletRobotics and pybullet" ON)
 
-OPTION(BULLET2_MULTITHREADING "Build Bullet 2 libraries with mutex locking around certain operations (required for multi-threading)" OFF)
+OPTION(BULLET2_MULTITHREADING "Build Bullet 2 libraries with mutex locking around certain operations (required for multi-threading)" ON)
 IF (BULLET2_MULTITHREADING)
     OPTION(BULLET2_USE_OPEN_MP_MULTITHREADING "Build Bullet 2 with support for multi-threading with OpenMP (requires a compiler with OpenMP support)" OFF)
     OPTION(BULLET2_USE_TBB_MULTITHREADING "Build Bullet 2 with support for multi-threading with Intel Threading Building Blocks (requires the TBB library to be already installed)" OFF)
@@ -64,9 +149,9 @@ OPTION(USE_MSVC_INCREMENTAL_LINKING "Use MSVC Incremental Linking" OFF)
 IF (CMAKE_SYSTEM_NAME STREQUAL WindowsPhone OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
 	OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" ON)
 ELSE ()
-	OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" OFF)
+	OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" ON)
 ENDIF (CMAKE_SYSTEM_NAME STREQUAL WindowsPhone OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
-OPTION(USE_MSVC_RELEASE_RUNTIME_ALWAYS "Use MSVC Release Runtime Library even in Debug" OFF)
+OPTION(USE_MSVC_RELEASE_RUNTIME_ALWAYS "Use MSVC Release Runtime Library even in Debug" ON)
 
 #SET(CMAKE_EXE_LINKER_FLAGS_INIT    "/STACK:10000000 /INCREMENTAL:NO")
 #SET(CMAKE_EXE_LINKER_FLAGS    "/STACK:10000000 /INCREMENTAL:NO")
@@ -145,7 +230,7 @@ IF(MSVC)
 		add_definitions(/arch:AVX)
 	ENDIF()
 
-	OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	ON)
+	OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	OFF)
 	IF (USE_MSVC_FAST_FLOATINGPOINT)
 		  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")
   ENDIF()
@@ -156,7 +241,7 @@ IF(MSVC)
 		SET(CMAKE_CXX_FLAGS "/GF ${CMAKE_CXX_FLAGS}")
 	ENDIF()
 
-	OPTION(USE_MSVC_FUNCTION_LEVEL_LINKING "Use MSVC /Gy function level linking option"	ON)
+	OPTION(USE_MSVC_FUNCTION_LEVEL_LINKING "Use MSVC /Gy function level linking option"	OFF)
 	IF(USE_MSVC_FUNCTION_LEVEL_LINKING)
 		SET(CMAKE_C_FLAGS "/Gy ${CMAKE_C_FLAGS}")
 		SET(CMAKE_CXX_FLAGS "/Gy ${CMAKE_CXX_FLAGS}")
@@ -175,7 +260,7 @@ IF(MSVC)
 		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /OPT:ICF")
 	ENDIF()
 
-	OPTION(USE_MSVC_DISABLE_RTTI "Use MSVC /GR- disabled RTTI flags option"	ON)
+	OPTION(USE_MSVC_DISABLE_RTTI "Use MSVC /GR- disabled RTTI flags option"	OFF)
 	IF(USE_MSVC_DISABLE_RTTI)
 	  STRING(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}) # Disable RTTI
 		SET(CMAKE_C_FLAGS "/GR- ${CMAKE_C_FLAGS}")
@@ -222,7 +307,7 @@ ENDIF(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES)
 ENDIF (WIN32)
 
 
-OPTION(BUILD_CPU_DEMOS "Build original Bullet CPU examples" ON)
+OPTION(BUILD_CPU_DEMOS "Build original Bullet CPU examples" OFF)
 
 
 
@@ -254,7 +339,7 @@ IF(BULLET2_MULTITHREADING)
 		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 	ENDIF (NOT MSVC)
 	IF (NOT WIN32)
-		FIND_PACKAGE(Threads)
+		#FIND_PACKAGE(Threads)
 		LINK_LIBRARIES( ${CMAKE_THREAD_LIBS_INIT} )
 	ENDIF (NOT WIN32)
 ENDIF (BULLET2_MULTITHREADING)
@@ -309,7 +394,6 @@ ENDIF(COMMAND cmake_policy)
 # This is the shortcut to finding GLU, GLUT and OpenGL if they are properly installed on your system
 # This should be the case.
 
-FIND_PACKAGE(OpenGL)
 IF (OPENGL_FOUND)
 	MESSAGE("OPENGL FOUND")
 	MESSAGE(${OPENGL_LIBRARIES})
@@ -409,10 +493,10 @@ IF(BUILD_BULLET3)
 
 			OPTION(BUILD_OPENGL3_DEMOS "Set when you want to build the OpenGL3+ demos" OFF)
 		ELSE()
-			OPTION(BUILD_OPENGL3_DEMOS "Set when you want to build the OpenGL3+ demos" ON)
+			OPTION(BUILD_OPENGL3_DEMOS "Set when you want to build the OpenGL3+ demos" OFF)
 		ENDIF()
 	ELSE()
-		OPTION(BUILD_OPENGL3_DEMOS "Set when you want to build Bullet 3 OpenGL3+ demos" ON)
+		OPTION(BUILD_OPENGL3_DEMOS "Set when you want to build Bullet 3 OpenGL3+ demos" OFF)
 	ENDIF()
 ELSE(BUILD_BULLET3)
 	unset(BUILD_OPENGL3_DEMOS CACHE)
@@ -426,7 +510,7 @@ ELSE()
 	ADD_DEFINITIONS(-DNO_OPENGL3)
 ENDIF(BUILD_OPENGL3_DEMOS)
 
-OPTION(BUILD_BULLET2_DEMOS "Set when you want to build the Bullet 2 demos" ON)
+OPTION(BUILD_BULLET2_DEMOS "Set when you want to build the Bullet 2 demos" OFF)
 IF(BUILD_BULLET2_DEMOS)
 
 	IF(EXISTS ${BULLET_PHYSICS_SOURCE_DIR}/examples AND IS_DIRECTORY ${BULLET_PHYSICS_SOURCE_DIR}/examples)
@@ -472,17 +556,17 @@ IF(INSTALL_LIBS)
 	SET(INCLUDE_INSTALL_DIR "include/bullet/" CACHE PATH "The subdirectory to the header prefix")
 	SET(PKGCONFIG_INSTALL_PREFIX "lib${LIB_SUFFIX}/pkgconfig/" CACHE STRING "Base directory for pkgconfig files")
 	IF(NOT MSVC)
-	  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/bullet.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/bullet.pc @ONLY)
+	  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/bullet.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/bullet${lib_type_suffix}.pc @ONLY)
   	INSTALL(
 		FILES
-		${CMAKE_CURRENT_BINARY_DIR}/bullet.pc
+		${CMAKE_CURRENT_BINARY_DIR}/bullet${lib_type_suffix}.pc
 		DESTINATION
 		${PKGCONFIG_INSTALL_PREFIX})
 	ENDIF(NOT MSVC)
 ENDIF()
 
 
-OPTION(BUILD_UNIT_TESTS "Build Unit Tests"	ON)
+OPTION(BUILD_UNIT_TESTS "Build Unit Tests"	OFF)
 
 IF (BUILD_UNIT_TESTS)
 	ENABLE_TESTING()
@@ -490,23 +574,22 @@ IF (BUILD_UNIT_TESTS)
 ENDIF()
 
 set (BULLET_CONFIG_CMAKE_PATH lib${LIB_SUFFIX}/cmake/bullet )
-list (APPEND BULLET_DEFINITIONS ${BULLET_DOUBLE_DEF})
-list (APPEND BULLET_LIBRARIES LinearMath)
-list (APPEND BULLET_LIBRARIES Bullet3Common)
-list (APPEND BULLET_LIBRARIES BulletInverseDynamics)
-list (APPEND BULLET_LIBRARIES BulletCollision)
-list (APPEND BULLET_LIBRARIES BulletDynamics)
-list (APPEND BULLET_LIBRARIES BulletSoftBody)
+list (APPEND BULLET_LIBRARIES LinearMath${lib_type_suffix})
+list (APPEND BULLET_LIBRARIES Bullet3Common${lib_type_suffix})
+list (APPEND BULLET_LIBRARIES BulletInverseDynamics${lib_type_suffix})
+list (APPEND BULLET_LIBRARIES BulletCollision${lib_type_suffix})
+list (APPEND BULLET_LIBRARIES BulletDynamics${lib_type_suffix})
+list (APPEND BULLET_LIBRARIES BulletSoftBody${lib_type_suffix})
 set (BULLET_USE_FILE ${BULLET_CONFIG_CMAKE_PATH}/UseBullet.cmake)
 configure_file 	( ${CMAKE_CURRENT_SOURCE_DIR}/BulletConfig.cmake.in
-					${CMAKE_CURRENT_BINARY_DIR}/BulletConfig.cmake
+					${CMAKE_CURRENT_BINARY_DIR}/BulletConfig${lib_type_suffix}.cmake
 					@ONLY ESCAPE_QUOTES
 				)
 OPTION(INSTALL_CMAKE_FILES "Install generated CMake files" ON)
 
 IF (INSTALL_CMAKE_FILES)
 	install ( FILES ${CMAKE_CURRENT_SOURCE_DIR}/UseBullet.cmake
-		${CMAKE_CURRENT_BINARY_DIR}/BulletConfig.cmake
+		${CMAKE_CURRENT_BINARY_DIR}/BulletConfig${lib_type_suffix}.cmake
 		DESTINATION ${BULLET_CONFIG_CMAKE_PATH}
 	)
 ENDIF (INSTALL_CMAKE_FILES)
diff --git a/Extras/CMakeLists.txt b/Extras/CMakeLists.txt
index 58a161a45..38e5d7899 100644
--- a/Extras/CMakeLists.txt
+++ b/Extras/CMakeLists.txt
@@ -1,11 +1,11 @@
 OPTION(BUILD_INVERSE_DYNAMIC_EXTRA "Build InverseDynamic extra module, only applied when BUILD_EXTRAS is ON" ON)
-OPTION(BUILD_BULLET_ROBOTICS_GUI_EXTRA "Build BulletRoboticsGUI extra module, only applied when BUILD_EXTRAS is ON" ON)
-OPTION(BUILD_BULLET_ROBOTICS_EXTRA "Build BulletRobotics extra module, only applied when BUILD_EXTRAS is ON" ON)
-OPTION(BUILD_OBJ2SDF_EXTRA "Build obj2sdf extra module, only applied when BUILD_EXTRAS is ON" ON)
-OPTION(BUILD_SERIALIZE_EXTRA "Build Serialize extra module, only applied when BUILD_EXTRAS is ON" ON)
+OPTION(BUILD_BULLET_ROBOTICS_GUI_EXTRA "Build BulletRoboticsGUI extra module, only applied when BUILD_EXTRAS is OFF" OFF)
+OPTION(BUILD_BULLET_ROBOTICS_EXTRA "Build BulletRobotics extra module, only applied when BUILD_EXTRAS is ON" OFF)
+OPTION(BUILD_OBJ2SDF_EXTRA "Build obj2sdf extra module, only applied when BUILD_EXTRAS is ON" OFF)
+OPTION(BUILD_SERIALIZE_EXTRA "Build Serialize extra module, only applied when BUILD_EXTRAS is ON" OFF)
 OPTION(BUILD_CONVEX_DECOMPOSITION_EXTRA "Build ConvexDecomposition extra module, only applied when BUILD_EXTRAS is ON" ON)
 OPTION(BUILD_HACD_EXTRA "Build HACD extra module, only applied when BUILD_EXTRAS is ON" ON)
-OPTION(BUILD_GIMPACTUTILS_EXTRA "Build GIMPACTUtils extra module, only applied when BUILD_EXTRAS is ON" ON)
+OPTION(BUILD_GIMPACTUTILS_EXTRA "Build GIMPACTUtils extra module, only applied when BUILD_EXTRAS is ON" OFF)
 
 IF(BUILD_INVERSE_DYNAMIC_EXTRA)
   SUBDIRS( InverseDynamics )
diff --git a/Extras/Serialize/BulletXmlWorldImporter/CMakeLists.txt b/Extras/Serialize/BulletXmlWorldImporter/CMakeLists.txt
index 9fd125e44..89d0e454c 100644
--- a/Extras/Serialize/BulletXmlWorldImporter/CMakeLists.txt
+++ b/Extras/Serialize/BulletXmlWorldImporter/CMakeLists.txt
@@ -2,7 +2,6 @@ INCLUDE_DIRECTORIES(
 	${BULLET_PHYSICS_SOURCE_DIR}/src
 	${BULLET_PHYSICS_SOURCE_DIR}/Extras/Serialize/BulletFileLoader
 	${BULLET_PHYSICS_SOURCE_DIR}/Extras/Serialize/BulletWorldImporter
-	${BULLET_PHYSICS_SOURCE_DIR}/examples/ThirdPartyLibs/tinyxml2
 )
 
 ADD_LIBRARY(
@@ -11,14 +10,28 @@ ADD_LIBRARY(
 	btBulletXmlWorldImporter.h
 	string_split.cpp
 	string_split.h
-	${BULLET_PHYSICS_SOURCE_DIR}/examples/ThirdPartyLibs/tinyxml2/tinyxml2.cpp
 )
 
+# Look for the header file.
+FIND_PATH(TINYXML_INCLUDE_DIR NAMES tinyxml2.h)
+MARK_AS_ADVANCED(TINYXML2_INCLUDE_DIR)
+
+# Look for the library.
+FIND_LIBRARY(TINYXML_LIBRARY NAMES tinyxml2)
+MARK_AS_ADVANCED(TINYXML2_LIBRARY)
+
+# all listed variables are TRUE
+INCLUDE(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(TinyXML2 DEFAULT_MSG TINYXML2_LIBRARY TINYXML2_INCLUDE_DIR)
+SET(TINYXML2_LIBRARIES ${TINYXML2_LIBRARY})
+SET(TINYXML2_INCLUDE_DIRS ${TINYXML2_INCLUDE_DIR})
+
+
 SET_TARGET_PROPERTIES(BulletXmlWorldImporter  PROPERTIES VERSION ${BULLET_VERSION})
 SET_TARGET_PROPERTIES(BulletXmlWorldImporter PROPERTIES SOVERSION ${BULLET_VERSION})
 
 IF (BUILD_SHARED_LIBS)
-	TARGET_LINK_LIBRARIES(BulletXmlWorldImporter BulletWorldImporter BulletDynamics BulletCollision BulletFileLoader LinearMath)
+	TARGET_LINK_LIBRARIES(BulletXmlWorldImporter tinyxml2 BulletWorldImporter BulletDynamics BulletCollision BulletFileLoader LinearMath)
 ENDIF (BUILD_SHARED_LIBS)
 
 IF (INSTALL_EXTRA_LIBS)
diff --git a/Extras/Serialize/BulletXmlWorldImporter/btBulletXmlWorldImporter.cpp b/Extras/Serialize/BulletXmlWorldImporter/btBulletXmlWorldImporter.cpp
index 17b144024..80210c694 100644
--- a/Extras/Serialize/BulletXmlWorldImporter/btBulletXmlWorldImporter.cpp
+++ b/Extras/Serialize/BulletXmlWorldImporter/btBulletXmlWorldImporter.cpp
@@ -14,7 +14,7 @@ subject to the following restrictions:
 */
 
 #include "btBulletXmlWorldImporter.h"
-#include "tinyxml2.h"
+#include <tinyxml2.h>
 #include "btBulletDynamicsCommon.h"
 #include "string_split.h"
 using namespace tinyxml2;
diff --git a/bullet.pc.cmake b/bullet.pc.cmake
index 1630d2979..e43d7762a 100644
--- a/bullet.pc.cmake
+++ b/bullet.pc.cmake
@@ -7,5 +7,5 @@ Name: bullet
 Description: Bullet Continuous Collision Detection and Physics Library
 Version: @BULLET_VERSION@
 Requires:
-Libs: -L${libdir} -lBulletSoftBody -lBulletDynamics -lBulletCollision -lLinearMath
+Libs: -L${libdir} -lBulletSoftBody@lib_type_suffix@ -lBulletDynamics@lib_type_suffix@ -lBulletCollision@lib_type_suffix@ -lLinearMath@lib_type_suffix@
 Cflags: @BULLET_DOUBLE_DEF@ -I${includedir} -I${prefix}/include
diff --git a/package.xml b/package.xml
new file mode 100644
index 000000000..20dbdea0f
--- /dev/null
+++ b/package.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0"?>
+<package format="2">
+  <name>bullet</name>
+  <version>3.21.0</version>
+  <description>Bullet3</description>
+  <maintainer email="wason@wasontech.com">John Wason</maintainer>
+  <license>BSD</license>
+
+  <export>
+    <build_type>cmake</build_type>
+  </export>
+
+</package>
\ No newline at end of file
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index c30125c53..553971795 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 
 IF(BUILD_BULLET3)
-	SUBDIRS(  Bullet3OpenCL Bullet3Serialize/Bullet2FileLoader Bullet3Dynamics Bullet3Collision Bullet3Geometry )
+	SUBDIRS( Bullet3Serialize/Bullet2FileLoader Bullet3Dynamics Bullet3Collision Bullet3Geometry )
 ENDIF(BUILD_BULLET3)
 
 
